name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch: # Allow manual triggering

env:
  IMAGE_NAME: myapplication
  # Set security thresholds
  CRITICAL_VULNERABILITIES_THRESHOLD: 0
  HIGH_VULNERABILITIES_THRESHOLD: 0

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get full history for versioning
      
      - name: Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
      - name: Run manual secret scan
        run: |
          # Use a direct approach rather than pre-commit hooks in CI
          echo "Running manual secret scanning..."
          
          # Install detect-secrets if needed for scanning
          pip install detect-secrets
          
          # Scan all files in the repository
          detect-secrets scan > secrets.json
          
          # Check if secrets were found
          if [ "$(grep -c "HIGH_ENTROPY" secrets.json || echo 0)" -gt 0 ]; then
            echo "Potential secrets found in the codebase!"
            cat secrets.json
            exit 1
          else
            echo "No secrets detected."
          fi
          
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "maven"
          
      - name: Dependency scanning
        run: |
          mvn org.owasp:dependency-check-maven:check
        
      - name: Check for critical vulnerabilities
        run: |
          CRITICAL_COUNT=$(grep -c "CRITICAL" target/dependency-check-report.xml || echo 0)
          HIGH_COUNT=$(grep -c "HIGH" target/dependency-check-report.xml || echo 0)
          echo "Found ${CRITICAL_COUNT} critical vulnerabilities and ${HIGH_COUNT} high vulnerabilities"
          
          if [ "$CRITICAL_COUNT" -gt "$CRITICAL_VULNERABILITIES_THRESHOLD" ] || [ "$HIGH_COUNT" -gt "$HIGH_VULNERABILITIES_THRESHOLD" ]; then
            echo "Security threshold exceeded! Pipeline failed."
            exit 1
          fi
          
      - name: Scan Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'Dockerfile'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Static code analysis
        if: github.event_name == 'pull_request' && github.base_ref == 'master'
        run: |
          mvn spotbugs:check pmd:check

  build-and-deploy:
    needs: security-checks
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for version commit
      packages: write # Needed for ghcr.io push
      id-token: write # Needed for signing

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get full history for versioning

      - name: Cleanup workspace and Docker
        run: |
          echo "Cleaning up workspace..."
          git clean -fdx

          echo "Pruning Docker resources..."
          docker system prune -af --volumes || true

          echo "Removing any previous build artifacts..."
          rm -rf target/ Dockerfile || true

          echo "Cleanup complete."

      - name: Bump Version
        id: bump
        uses: nnichols/maven-version-bump-action@v3
        # with:
        # github-token: ${{ secrets.github_token }}

      - name: Print Version
        run: "echo 'New Version: ${{steps.bump.outputs.version}}'"

      - name: Extract Git metadata for tagging
        id: git-metadata
        shell: bash
        run: |
          SHA_SHORT=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y%m%d')
          BRANCH=${GITHUB_REF#refs/heads/}

          echo "sha_short=${SHA_SHORT}" >> "$GITHUB_OUTPUT"
          echo "date=${DATE}" >> "$GITHUB_OUTPUT"
          echo "branch=${BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Prepare Docker tags
        id: docker-tags
        shell: bash
        run: |
          # Always include these tags
          TAGS="ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
          TAGS="$TAGS,ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.git-metadata.outputs.sha_short }}"
          TAGS="$TAGS,ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.git-metadata.outputs.date }}"

          # Add version tag if version was bumped (check if version exists and is not empty)
          if [ -n "${{ steps.bump.outputs.version }}" ]; then
            TAGS="$TAGS,ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.bump.outputs.version }}"
            echo "Version tag added: ${{ steps.bump.outputs.version }}"
          else
            echo "No version change detected, skipping version tag"
          fi

          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
          echo "All tags: $TAGS"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "maven"

      - name: Build application
        run: mvn -B package --file pom.xml

      - name: Create multi-stage Dockerfile
        run: |
          # Creating Dockerfile with optimization techniques
          cat > Dockerfile << 'EOF'

          FROM maven:3.9-amazoncorretto-17 AS build
          WORKDIR /app

          # Copy only pom.xml first to leverage Docker cache layers
          COPY pom.xml .
          RUN mvn dependency:go-offline

          # Copy source and build
          COPY src ./src
          RUN mvn clean package -DskipTests

          # Try to detect if this is a Spring Boot app with layering support
          # This creates a conditional build pipeline that works with both
          # regular Java apps and Spring Boot apps with layertools
          RUN mkdir -p extracted && \
              if jar -tf target/*.jar | grep -q "BOOT-INF/layers.idx"; then \
                echo "Spring Boot layered JAR detected, extracting layers..."; \
                java -Djarmode=layertools -jar target/*.jar extract --destination extracted; \
              else \
                echo "Regular JAR detected, using simple copy..."; \
                mkdir -p extracted/application; \
                cp target/*.jar extracted/application/; \
              fi

          FROM eclipse-temurin:17-jre-alpine
          WORKDIR /app

          # Add labels for better maintainability
          LABEL org.opencontainers.image.source=https://github.com/$GITHUB_REPOSITORY
          LABEL org.opencontainers.image.description="Optimized Java application container"

          # Security: Create non-root user for running the application
          RUN addgroup --system javauser && adduser --system --ingroup javauser javauser

          # Try to copy layers if available, fall back to regular JAR if not
          # This supports both Spring Boot layered apps and regular Java apps
          COPY --from=build --chown=javauser:javauser /app/extracted/ ./

          # Set appropriate permissions
          RUN chmod -R u=rX,g=rX /app
          USER javauser

          # Alpine optimization: Remove unnecessary files to keep image small
          # Container ready configuration
          ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"

          EXPOSE 8080

          # Dynamic entrypoint that works for both Spring Boot and standard Java apps
          ENTRYPOINT ["sh", "-c", "if [ -f 'org/springframework/boot/loader/JarLauncher.class' ]; then java $JAVA_OPTS org.springframework.boot.loader.JarLauncher; elif [ -d 'application' ]; then java $JAVA_OPTS -jar application/*.jar; else java $JAVA_OPTS -jar *.jar; fi"]
          EOF

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@main

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.docker-tags.outputs.tags }}
          
      - name: Scan built container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ format('ghcr.io/{0}/{1}:{2}', github.repository_owner, env.IMAGE_NAME, steps.git-metadata.outputs.sha_short) }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Sign container image
        run: |
          cosign sign --key env://COSIGN_PRIVATE_KEY ${{ format('ghcr.io/{0}/{1}:{2}', github.repository_owner, env.IMAGE_NAME, steps.git-metadata.outputs.sha_short) }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

  deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: read
      id-token: write
    
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        
      - name: Verify container signature
        run: |
          cosign verify --key env://COSIGN_PUBLIC_KEY ${{ format('ghcr.io/{0}/{1}:{2}', github.repository_owner, env.IMAGE_NAME, needs.build-and-deploy.outputs.sha_short) }}
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
          
      - name: Deploy application
        run: |
          echo "Deploying application..."
          # Add your deployment commands here
          echo "Application deployed successfully!"